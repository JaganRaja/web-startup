61445,61447,61403

HTML meta data
authorisation and authentication
table body
frameworks instead of language
url loading what is happening


HTML meta data::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

<head>
  <meta charset="UTF-8">
  <meta name="description" content="Free Web tutorials">
  <meta name="keywords" content="HTML, CSS, JavaScript">
  <meta name="author" content="John Doe">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

Definition and Usage
The <meta> tag defines metadata about an HTML document. Metadata is data (information) about data.

<meta> tags always go inside the <head> element, and are typically used to specify character set, page description, keywords, author of the document, and viewport settings.

Metadata will not be displayed on the page, but is machine parsable.

Metadata is used by browsers (how to display content or reload page), search engines (keywords), and other web services.

There is a method to let web designers take control over the viewport (the user's visible area of a web page), through the <meta> tag (See "Setting The Viewport" example below).

charset	character_set	Specifies the character encoding for the HTML document
content	text	Specifies the value associated with the http-equiv or name attribute
http-equiv	content-security-policy
content-type
default-style
refresh	Provides an HTTP header for the information/value of the content attribute
name	application-name
author
description
generator
keywords
viewport	Specifies a name for the metadata


More Examples
Define keywords for search engines:

<meta name="keywords" content="HTML, CSS, JavaScript">
Define a description of your web page:

<meta name="description" content="Free Web tutorials for HTML and CSS">
Define the author of a page:

<meta name="author" content="John Doe">
Refresh document every 30 seconds:

<meta http-equiv="refresh" content="30">
Setting the viewport to make your website look good on all devices:

<meta name="viewport" content="width=device-width, initial-scale=1.0">


Setting the Viewport
The viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.

You should include the following <meta> element in all your web pages:

<meta name="viewport" content="width=device-width, initial-scale=1.0">
This gives the browser instructions on how to control the page's dimensions and scaling.

The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).

The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.

Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:

Tip: If you are browsing this page with a phone or a tablet, you can click on the two links below to see the difference.



authorisation and authentication::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Authentication means confirming your own identity, whereas authorization means being allowed access to the system. 
In even more simpler terms authentication is the process of verifying oneself, 
while authorization is the process of verifying what you have access to.

Authentication
Authentication is about validating your credentials such as Username/User ID and password to verify your identity. 
The system then checks whether you are what you say you are using your credentials. Whether in public or private networks, 
the system authenticates the user identity through login passwords. Usually authentication is done by a username and password, 
although there are other various ways to be authenticated.
Authentication factors determine the many different elements the system uses to verify one’s identity before granting the individual access to anything. 
An individual’s identity can be determined by what the person knows, and when it comes to security at least two or 
all the three authentication factors must be verified in order to grant someone permission to the system. Based on the security level, 
authentication factors can vary from one of the following:


Single- Factor Authentication
Two- Factor Authentication:
Multi- Factor Authentication: 


Authorization
Authorization occurs after your identity is successfully authenticated by the system, which therefore gives you full access to resources 
such as information, files, databases, funds, etc. However authorization verifies your rights to grant you access to resources only after 
determining your ability to access the system and up to what extent. In other words, authorization is the process to determine whether the
 authenticated user has access to the particular resources. A good example of this is, once verifying and confirming employee ID and 
passwords through authentication, the next step would be determining which employee has access to which floor and that is done through authorization.

Access to a system is protected by authentication and authorization, and they are frequently used in conjunction with each other. Although both have different 
concepts behind then, they are critical to the web service infrastructure, especially when it comes to being granted access to a system. Understanding 
each term is very important and a key aspect of security.



url search opertion:::::::::::::::::::::::::::::::::::::::::


“What happens when you type in a URL” is a deceptive question commonly asked in tech interviews.
 If you look online, there are many very detailed resources but few concise explanations of how a web browser, a server, and the general internet work together.

This is how I would explain it:

You enter a URL into a web browser
The browser looks up the IP address for the domain name via DNS
The browser sends a HTTP request to the server
The server sends back a HTTP response
The browser begins rendering the HTML
The browser sends requests for additional objects embedded in HTML (images, css, JavaScript) and repeats steps 3-5.
Once the page is loaded, the browser sends further async requests as needed.


That’s really it. Here’s a description in words for this site.

When you type “https://wsvincent.com” into your browser the first thing that happens is a Domain Name Server (DNS) matches “wsvincent.com” to an IP address.
 Then the browser sends an HTTP request to the server and the server sends back an HTTP response. The browser begins rendering the HTML on the page 
while also requesting any additional resources such as CSS, JavaScript, images, etc. Each subsequent request completes a request/response cycle 
and is rendered in turn by the browser. Then once the page is loaded some sites (though not mine) will make further asynchronous requests.


WHy framework:::::::::::::::::::::::::::::::::::

To understand the difference between Language and Framework, think of the popular sport Cricket. 
If Cricket is the language, various formats such as Twenty-20, One Day International and Test Series are the frameworks.

At work, I was recently speaking to an audience of non-technical folks to help them with technical foundations and the latest software industry trends.
One of the topics was Programming Languages and Frameworks. Java is a language and Spring is one of the popular frameworks used to create a 
Java web application. Similarly, we have Python with Django, Ruby on Rails, etc. However, the distinction between the two wasn’t very clear 
to the audience who had little first-hand experience of programming. One example that made them appreciate the difference was the analogy of Cricket.
If Cricket is the language, various formats such as Twenty-20, One Day International and Test Series are the frameworks. You can play 
Cricket without using any of the standard formats. You can define your own format such as gully Cricket, 20-overs ODI, etc. and play in 
your neighbourhood or within your city. But in the professional Cricket world, you would play in one of the formats. Whether you are playing in 
one of the standard formats or your own, the basic rules of Cricket still apply. A batsman can be clean bowled, leg-before, caught or run out. 
A bowler will have to bowl six balls, that are not wide or no-balls. You gain runs by running between the wickets, or by hitting boundaries or sixes. 
These are some basic rules of Cricket that all the standard formats or your own format will most likely obey.
Similarly, you can write code any way you like — without using any of the frameworks or with the help of an existing framework or you can create your own framework. 
If you are lucky, your framework can see wider adoption and become a standard too. But in the software development world, you will most likely adopt one of the popular frameworks. 
The rules of the language must be obeyed irrespective of whether you use one framework or the other or none.
Since web applications are one of the most common types of applications, there are tons of frameworks for it in practically every language. 
For creating web applications using the Java programming language, some of the frameworks available are Spring, GWT, JSF, Struts, etc. 
If you are coding in Python, you can again choose from an array of web frameworks including Django, Tornado, and Flask. Frameworks may have an opinionated way of doing things. 
Some frameworks are full of features and may be an overkill if you only want to create a basic application. Others are lean and focused on doing only one thing. 
Choosing a framework for your application is as big a decision as choosing the language itself. Once you have built your application using any of the frameworks, 
[changing the framework is often not practical due to the amount of rewrite required to achieve that.
This analogy with Cricket seemed to hit home (or should I say a six-er) with my audience. What do you think?


Frameworks are cohesive sets of library code that simplify programming in any given language, whereas language is the actual syntax and grammar of writing a code. 

Programming used to be all about getting the most you could out of code, but that practice has largely been done away with by automated code-writing systems. 
Today, instead of focusing on how to write an API, programmers care more about what that API can do. It’s like the difference between trying to get 
the correct spelling of a word versus actually understanding what the word means and how to use it in a sentence.

Frameworks build strong algorithms
One of the most important parts of using a programming language is understanding the algorithms and making sure the code fits into those algorithms. 
However, algorithms can be limited by language because they are actually defined by the frameworks. Changing and establishing algorithms as part of the 
framework is much safer and more effective than trying to tinker with them as part of the language.

By focusing on frameworks, programmers can have a bigger say in the future and can actually set the rules for the codes instead of simply implementing them. 
One the rules are set, everyone must work inside of them, so understanding framework gives users a chance to set the rules that everyone else must follow.

Frameworks are developed by different people. In order to consolidate all these projects into a single unified whole, you’d need to turn them into a 
single organization reporting in at different levels. That’s a lot of added management overhead; too much for what are often open source and personal projects to most contributors.


table body :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
The <tbody> tag is used to group the body content in an HTML table.

The <tbody> element is used in conjunction with the <thead> and <tfoot> elements to specify each part of a table (body, header, footer).

Browsers can use these elements to enable scrolling of the table body independently of the header and footer. 
Also, when printing a large table that spans multiple pages, these elements can enable the table header and footer to be printed at the top and bottom of each page.

